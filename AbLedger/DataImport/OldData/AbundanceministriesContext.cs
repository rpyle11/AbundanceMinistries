// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace DataImport.OldData
{
    public partial class AbundanceministriesContext : DbContext
    {
        public AbundanceministriesContext()
        {
        }

        public AbundanceministriesContext(DbContextOptions<AbundanceministriesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<AppErrors> AppErrors { get; set; }
        public virtual DbSet<Payees> Payees { get; set; }
        public virtual DbSet<Transactions> Transactions { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {

                optionsBuilder.UseSqlServer("Data Source=.\\sql2019;Initial Catalog=AbundanceMinistries;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Accounts>(entity =>
            {
                entity.HasKey(e => e.AccountId);

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.BlnActive)
                    .IsRequired()
                    .HasColumnName("blnActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VcAccount)
                    .HasMaxLength(50)
                    .HasColumnName("vcAccount");
            });

            modelBuilder.Entity<AppErrors>(entity =>
            {
                entity.HasKey(e => e.ErrId);

                entity.Property(e => e.AppMethod)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ErrDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ErrorMsg)
                    .IsRequired()
                    .HasMaxLength(1500);
            });

            modelBuilder.Entity<Payees>(entity =>
            {
                entity.HasKey(e => e.PayeeId);

                entity.Property(e => e.PayeeId).HasColumnName("PayeeID");

                entity.Property(e => e.BlnActive)
                    .IsRequired()
                    .HasColumnName("blnActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VcAddress)
                    .HasMaxLength(500)
                    .HasColumnName("vcAddress");

                entity.Property(e => e.VcPayee)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("vcPayee");
            });

            modelBuilder.Entity<Transactions>(entity =>
            {
                entity.HasKey(e => e.TransId);

                entity.Property(e => e.TransId).HasColumnName("TransID");

                entity.Property(e => e.AccountId).HasColumnName("AccountID");

                entity.Property(e => e.BeginBalance).HasColumnType("money");

                entity.Property(e => e.CheckNum).HasMaxLength(50);

                entity.Property(e => e.EndBalance).HasColumnType("money");

                entity.Property(e => e.Memo).HasMaxLength(1000);

                entity.Property(e => e.PayeeId).HasColumnName("PayeeID");

                entity.Property(e => e.TransAmount).HasColumnType("money");

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Transactions_Accounts");

                entity.HasOne(d => d.Payee)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.PayeeId)
                    .HasConstraintName("FK_Transactions_Payees");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}